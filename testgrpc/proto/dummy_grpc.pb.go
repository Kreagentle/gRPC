// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: dummy.proto

package gRPC

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Server_Test_FullMethodName            = "/test.Server/Test"
	Server_TestFewTimes_FullMethodName    = "/test.Server/TestFewTimes"
	Server_TestFewRequests_FullMethodName = "/test.Server/TestFewRequests"
)

// ServerClient is the client API for Server service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerClient interface {
	Test(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error)
	TestFewTimes(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TestResponse], error)
	TestFewRequests(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[TestRequest, TestResponse], error)
}

type serverClient struct {
	cc grpc.ClientConnInterface
}

func NewServerClient(cc grpc.ClientConnInterface) ServerClient {
	return &serverClient{cc}
}

func (c *serverClient) Test(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TestResponse)
	err := c.cc.Invoke(ctx, Server_Test_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverClient) TestFewTimes(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TestResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Server_ServiceDesc.Streams[0], Server_TestFewTimes_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TestRequest, TestResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Server_TestFewTimesClient = grpc.ServerStreamingClient[TestResponse]

func (c *serverClient) TestFewRequests(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[TestRequest, TestResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Server_ServiceDesc.Streams[1], Server_TestFewRequests_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TestRequest, TestResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Server_TestFewRequestsClient = grpc.ClientStreamingClient[TestRequest, TestResponse]

// ServerServer is the server API for Server service.
// All implementations must embed UnimplementedServerServer
// for forward compatibility.
type ServerServer interface {
	Test(context.Context, *TestRequest) (*TestResponse, error)
	TestFewTimes(*TestRequest, grpc.ServerStreamingServer[TestResponse]) error
	TestFewRequests(grpc.ClientStreamingServer[TestRequest, TestResponse]) error
	mustEmbedUnimplementedServerServer()
}

// UnimplementedServerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedServerServer struct{}

func (UnimplementedServerServer) Test(context.Context, *TestRequest) (*TestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Test not implemented")
}
func (UnimplementedServerServer) TestFewTimes(*TestRequest, grpc.ServerStreamingServer[TestResponse]) error {
	return status.Errorf(codes.Unimplemented, "method TestFewTimes not implemented")
}
func (UnimplementedServerServer) TestFewRequests(grpc.ClientStreamingServer[TestRequest, TestResponse]) error {
	return status.Errorf(codes.Unimplemented, "method TestFewRequests not implemented")
}
func (UnimplementedServerServer) mustEmbedUnimplementedServerServer() {}
func (UnimplementedServerServer) testEmbeddedByValue()                {}

// UnsafeServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerServer will
// result in compilation errors.
type UnsafeServerServer interface {
	mustEmbedUnimplementedServerServer()
}

func RegisterServerServer(s grpc.ServiceRegistrar, srv ServerServer) {
	// If the following call pancis, it indicates UnimplementedServerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Server_ServiceDesc, srv)
}

func _Server_Test_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServer).Test(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Server_Test_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServer).Test(ctx, req.(*TestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_TestFewTimes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TestRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServerServer).TestFewTimes(m, &grpc.GenericServerStream[TestRequest, TestResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Server_TestFewTimesServer = grpc.ServerStreamingServer[TestResponse]

func _Server_TestFewRequests_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServerServer).TestFewRequests(&grpc.GenericServerStream[TestRequest, TestResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Server_TestFewRequestsServer = grpc.ClientStreamingServer[TestRequest, TestResponse]

// Server_ServiceDesc is the grpc.ServiceDesc for Server service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Server_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "test.Server",
	HandlerType: (*ServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Test",
			Handler:    _Server_Test_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "TestFewTimes",
			Handler:       _Server_TestFewTimes_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "TestFewRequests",
			Handler:       _Server_TestFewRequests_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "dummy.proto",
}
